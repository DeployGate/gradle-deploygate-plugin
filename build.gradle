buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'

group = 'com.deploygate'
archivesBaseName = 'gradle'
version = new File(rootProject.projectDir, 'src/main/resources/VERSION').text.trim()

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

ext {
    agpVersion = '3.3.0'
}

sourceSets {
    acceptanceTest {
        groovy.srcDirs += ["src/test/acceptance"]
        resources.srcDirs += test.resources.srcDirs
    }
}

configurations {
    acceptanceTestCompileOnly.extendsFrom testCompileOnly
    acceptanceTestRuntime.extendsFrom testRuntime
    acceptanceTestRuntimeOnly.extendsFrom testRuntimeOnly
    acceptanceTestImplementation.extendsFrom testImplementation
    acceptanceTestApi.extendsFrom testApi
}

// For testing. The classpaths of this plugin must be specified

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()
    compileOnly "com.android.tools.build:gradle:$agpVersion"

    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    implementation 'org.apache.httpcomponents:httpmime:4.2.5'

    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.spockframework.spock:spock-core:spock-1.2'

    // 2.21.0 will break behaviors of multipart requests :thinking_face:
    testImplementation "com.github.tomakehurst:wiremock:2.20.0"

    // for ApplyPluginSpec
    testRuntimeOnly "com.android.tools.build:gradle:$agpVersion"
    testRuntimeOnly files(createClasspathManifest)
}

tasks.create("acceptanceTest", Test) {
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    dependsOn("createClasspathManifest")
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "ANDROID_HOME": System.getenv("ANDROID_HOME")
    ])
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from "${buildDir}/javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// Release
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'maven'
        name = project.archivesBaseName
        userOrg = 'deploygate'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/DeployGate/gradle-deploygate-plugin'
        issueTrackerUrl = 'https://github.com/DeployGate/gradle-deploygate-plugin/issues'
        vcsUrl = 'https://github.com/DeployGate/gradle-deploygate-plugin.git'
        githubRepo = 'DeployGate/gradle-deploygate-plugin'
        version {
            name = project.version
            released = new Date()
        }
    }

    configurations = ['archives']
}