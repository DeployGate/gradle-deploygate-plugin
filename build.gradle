buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'com.deploygate'
archivesBaseName = 'gradle'
version = new File(rootProject.projectDir, 'src/main/resources/VERSION').text.trim()

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

ext {
    agpVersion = '3.3.2'
    unstableAgpVersion = '4.2.0-beta04'
    releaseVersion = version
}

sourceSets {
    unrollAcceptanceTest {
        groovy.srcDirs += ["src/test/unrollAcceptance"]
        resources.srcDirs += test.resources.srcDirs
    }
    pluginAcceptanceTest {
        groovy.srcDirs += ["src/test/acceptance"]
        resources.srcDirs += test.resources.srcDirs
    }
}

configurations {
    unrollAcceptanceTestCompileOnly.extendsFrom testCompileOnly
    unrollAcceptanceTestRuntime.extendsFrom testRuntime
    unrollAcceptanceTestRuntimeOnly.extendsFrom testRuntimeOnly
    unrollAcceptanceTestImplementation.extendsFrom testImplementation
    unrollAcceptanceTestApi.extendsFrom testApi

    pluginAcceptanceTestCompileOnly.extendsFrom testCompileOnly
    pluginAcceptanceTestRuntime.extendsFrom testRuntime
    pluginAcceptanceTestRuntimeOnly.extendsFrom testRuntimeOnly
    pluginAcceptanceTestImplementation.extendsFrom testImplementation
    pluginAcceptanceTestApi.extendsFrom testApi
}

// For testing. The classpaths of this plugin must be specified

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()
    compileOnly "com.android.tools.build:gradle:$unstableAgpVersion"

    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    implementation 'org.apache.httpcomponents:httpmime:4.2.5'
    implementation 'com.google.code.gson:gson:2.8.6'

    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.12'

    // 2.21.0 will break behaviors of multipart requests :thinking_face:
    testImplementation "com.github.tomakehurst:wiremock:2.20.0"

    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'

    // for ApplyPluginSpec
    testRuntimeOnly "com.android.tools.build:gradle:$agpVersion"
    testRuntimeOnly files(createClasspathManifest)
}

tasks.create("testUnrollAcceptanceTest", Test) {
    testClassesDirs = sourceSets.unrollAcceptanceTest.output.classesDirs
    classpath = sourceSets.unrollAcceptanceTest.runtimeClasspath
    dependsOn("createClasspathManifest")
}

tasks.create("testPluginAcceptanceTest", Test) {
    testClassesDirs = sourceSets.pluginAcceptanceTest.output.classesDirs
    classpath = sourceSets.pluginAcceptanceTest.runtimeClasspath
    dependsOn("createClasspathManifest")
}

project.tasks.withType(Test).configureEach {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "ANDROID_HOME": System.getenv("ANDROID_HOME"),
            "TEST_AGP_VERSION": System.getenv("TEST_AGP_VERSION"),
            "TEST_GRADLE_VERSION": System.getenv("TEST_GRADLE_VERSION"),
            "NO_AAB_SUPPORT": false, // TODO Remove this
            "NO_KTS_SUPPORT": false // TODO Remove this
    ])
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from "${buildDir}/javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('nexusPassword') ? nexusPassword : ""
}

def isRelease() {
    return rootProject.ext.releaseVersion =~ /^\d+\.\d+\.\d+$/
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = isRelease() ? "https://oss.sonatype.org/service/local/staging/deploy/maven2/" : "https://oss.sonatype.org/content/repositories/snapshots/"

                credentials(PasswordCredentials) {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId = project.group
                artifactId = project.archivesBaseName
                version = project.version
                pom {
                    name = "Gradle DeployGate Plugin"
                    description = "This is the DeployGate plugin for the Gradle. You can build and deploy your apps to DeployGate by running a single task."
                    url = 'https://github.com/DeployGate/gradle-deploygate-plugin'
                    licenses {
                        license {
                            name =  "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = "deploygate"
                            name = "DeployGate"
                        }
                    }
                    scm {
                        url = 'https://github.com/DeployGate/gradle-deploygate-plugin'
                    }
                }
            }
        }

        signing {
            required { (isRelease() || System.getenv("RELEASE_SCRIPT_TEST") == "true") && gradle.taskGraph.hasTask("publishReleasePublicationToMavenRepository") }

            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
            publishing.publications.configureEach { publication ->
                sign publication
            }
        }
    }
}