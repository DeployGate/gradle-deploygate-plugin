version: 2.1

executors:
  acceptance_test:
    machine: true
    working_directory: ~/gradle-deploygate-plugin
    environment:
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError" -Dorg.gradle.daemon=false'
      ANDROID_HOME: /home/circleci/android
  android_java:
    docker:
      - image: circleci/android:api-29
    working_directory: ~/gradle-deploygate-plugin
    environment:
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError" -Dorg.gradle.daemon=false'

commands:
  download_sdk:
    parameters:
      version:
        type: string
        default: "v2"
      zip_hash:
        type: string
        default: "4333796"
    steps:
      - restore_cache:
          keys:
            - android-sdk-cache-<< parameters.zip_hash >>-<< parameters.version >>
      - run:
          name:
          command: |
            mkdir -p $ANDROID_HOME
            cp -f .circleci/android/licenses $ANDROID_HOME/licenses

            if ! [[ -d $ANDROID_HOME/tools ]]; then
              wget -q -O sdk-tools.zip "https://dl.google.com/android/repository/sdk-tools-linux-<< parameters.zip_hash >>.zip"
              unzip -qq sdk-tools.zip -d $ANDROID_HOME
              rm sdk-tools.zip
            fi

            yes | $ANDROID_HOME/tools/bin/sdkmanager "build-tools;29.0.2" "build-tools;30.0.0" "build-tools;30.0.2" "platforms;android-29" "platform-tools" >/dev/null 2>&1 || if [ $? -ne '141' ]; then exit $?; fi;
      - save_cache:
          paths:
            - ~/android
          key: android-sdk-cache-<< parameters.zip_hash >>-<< parameters.version >>
  use_gradle_cache:
    parameters:
      cache_version:
        type: string
        default: v3
      prefix:
        type: string
    steps:
      - restore_cache:
          keys:
          - gradle-<< parameters.cache_version >>-<< parameters.prefix >>-{{ checksum "build.gradle" }}
          - gradle-<< parameters.cache_version >>-<< parameters.prefix >>-
          - gradle-<< parameters.cache_version >>-
          - gradle-
  save_gradle_cache:
    parameters:
      cache_version:
        type: string
        default: v3
      prefix:
        type: string
    steps:
      - save_cache:
          paths:
            - ~/.android
            - ~/.gradle
            - .gradle
            - ~/.m2
          key: gradle-<< parameters.cache_version >>-<< parameters.prefix >>-{{ checksum "build.gradle" }}
  acceptance_test:
    parameters:
      agp_version:
        type: string
      gradle_version:
        type: string
    steps:
      - run: rm -fr build/reports/tests/testPluginAcceptanceTest build/test-results/tests/testPluginAcceptanceTest || true
      - run: echo "Env. agp(<< parameters.agp_version >>) and gradle(<< parameters.gradle_version >>)"
      - run:
          command: ./gradlew testPluginAcceptanceTest
          environment:
            TEST_AGP_VERSION: << parameters.agp_version >>
            TEST_GRADLE_VERSION: << parameters.gradle_version >>
      - store_artifacts:
           path: build/reports/tests/testPluginAcceptanceTest
           destination: reports/tests/testPluginAcceptanceTest/<< parameters.agp_version >>
           when: always
      - store_test_results:
           path: build/test-results/tests/testPluginAcceptanceTest
           when: always

jobs:
  unit_tests:
    executor: android_java
    steps:
    - checkout
    - use_gradle_cache:
        prefix: unit
    - run: ./gradlew publishToMavenLocal test
    - save_gradle_cache:
        prefix: unit
    - store_artifacts:
        path: build/reports/tests/test
        when: always
    - store_test_results:
        path: build/test-results/tests/test
        when: always
  acceptance_tests_for_running_env:
    executor: acceptance_test
    parameters:
      agp_version:
        type: string
      gradle_version:
        type: string
    steps:
      - checkout
      - download_sdk
      - use_gradle_cache:
          prefix: acceptance
      - run: echo "Env. agp(<< parameters.agp_version >>) and gradle(<< parameters.gradle_version >>)"
      - run:
          command: ./gradlew testPluginAcceptanceTest
          environment:
            TEST_AGP_VERSION: << parameters.agp_version >>
            TEST_GRADLE_VERSION: << parameters.gradle_version >>
      - store_artifacts:
          path: build/reports/tests/testPluginAcceptanceTest
          destination: reports/tests/testPluginAcceptanceTest/<< parameters.agp_version >>
          when: always
      - store_test_results:
          path: build/test-results/tests/testPluginAcceptanceTest
          when: always

  acceptance_tests:
    executor: acceptance_test
    steps:
    - checkout
    - download_sdk
    - use_gradle_cache:
        prefix: acceptance
    - run: ./gradlew testUnrollAcceptanceTest
    - store_artifacts:
        path: build/reports/tests/testUnrollAcceptanceTest
        when: always
    - store_test_results:
        path: build/test-results/tests/testUnrollAcceptanceTest
        when: always
    - save_gradle_cache:
        prefix: acceptance

workflows:
  version: 2
  on_commit:
    jobs:
      - unit_tests
      - acceptance_tests
      - acceptance_tests_for_running_env:
          name: 'test-3.5.1'
          agp_version: '3.5.1'
          gradle_version: '5.4.1'
      - acceptance_tests_for_running_env:
          name: 'test-3.6.3'
          agp_version: '3.6.3'
          gradle_version: '5.6.4'
      - acceptance_tests_for_running_env:
          name: 'test-4.1.0'
          agp_version: '4.1.0'
          gradle_version: '6.5'
      - acceptance_tests_for_running_env:
          name: 'test-4.2.0'
          agp_version: '4.2.0'
          gradle_version: '6.7.1'
      - acceptance_tests_for_running_env:
          name: 'test-4.2.0-v2'
          agp_version: '4.2.0'
          gradle_version: '7.0'
